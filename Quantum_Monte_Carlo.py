# -*- coding: utf-8 -*-
"""Quantum Monte Carlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i9FS_N2DKPaCKEtt5MphBkzQCBemWMIY
"""

pip install pennylane

import pennylane as qml
import numpy as np
from scipy.stats import norm

# Set parameters
m = 5                           # Number of qubits for state preparation
n = 6                           # Number of qubits for estimation
M = 2 ** m                      # Discretization points
x_max = np.pi                   # Range for x values
x = np.linspace(-x_max, x_max, M)

# Probability distribution p
p = np.array([norm().pdf(x_i) for x_i in x])  # Gaussian distribution
p /= np.sum(p)  # Normalize probabilities

# Function f(x) - target function
f = lambda i: np.sin(x[i]) ** 2

# Define qubits
qubits = range(m + 1)                      # State preparation qubits
est_qubits = range(m + 1, m + n + 1)           # Estimation qubits
n_qubits = m + n + 1                   # Total number of qubits

# Create a quantum device
dev = qml.device("default.qubit", wires=n_qubits)

# Quantum Monte Carlo Circuit
@qml.qnode(dev)
def qmc():
    # Quantum Monte Carlo template
    qml.templates.QuantumMonteCarlo(
        p,
        f,
        qubits,
        est_qubits
    )
    # Measure probabilities
    return qml.probs(est_qubits)

p_est = qmc()
print("Estimated Probabilities:", p_est)